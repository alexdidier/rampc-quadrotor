/* Auto-generated by genmsg_cpp for file /home/crazyfly/crazyflie_ws/sandbox/crazypkg/msg/MotorCommands.msg */
#ifndef CRAZYPKG_MESSAGE_MOTORCOMMANDS_H
#define CRAZYPKG_MESSAGE_MOTORCOMMANDS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace crazypkg
{
template <class ContainerAllocator>
struct MotorCommands_ {
  typedef MotorCommands_<ContainerAllocator> Type;

  MotorCommands_()
  : cmd1(0.0)
  , cmd2(0.0)
  , cmd3(0.0)
  , cmd4(0.0)
  {
  }

  MotorCommands_(const ContainerAllocator& _alloc)
  : cmd1(0.0)
  , cmd2(0.0)
  , cmd3(0.0)
  , cmd4(0.0)
  {
  }

  typedef float _cmd1_type;
  float cmd1;

  typedef float _cmd2_type;
  float cmd2;

  typedef float _cmd3_type;
  float cmd3;

  typedef float _cmd4_type;
  float cmd4;


  typedef boost::shared_ptr< ::crazypkg::MotorCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazypkg::MotorCommands_<ContainerAllocator>  const> ConstPtr;
}; // struct MotorCommands
typedef  ::crazypkg::MotorCommands_<std::allocator<void> > MotorCommands;

typedef boost::shared_ptr< ::crazypkg::MotorCommands> MotorCommandsPtr;
typedef boost::shared_ptr< ::crazypkg::MotorCommands const> MotorCommandsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::crazypkg::MotorCommands_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::crazypkg::MotorCommands_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace crazypkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::crazypkg::MotorCommands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::crazypkg::MotorCommands_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::crazypkg::MotorCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1df7dce4d8fafaa23f1189b3eaa4180b";
  }

  static const char* value(const  ::crazypkg::MotorCommands_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1df7dce4d8fafaa2ULL;
  static const uint64_t static_value2 = 0x3f1189b3eaa4180bULL;
};

template<class ContainerAllocator>
struct DataType< ::crazypkg::MotorCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "crazypkg/MotorCommands";
  }

  static const char* value(const  ::crazypkg::MotorCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::crazypkg::MotorCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 cmd1\n\
float32 cmd2\n\
float32 cmd3\n\
float32 cmd4\n\
\n\
\n\
";
  }

  static const char* value(const  ::crazypkg::MotorCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::crazypkg::MotorCommands_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::crazypkg::MotorCommands_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cmd1);
    stream.next(m.cmd2);
    stream.next(m.cmd3);
    stream.next(m.cmd4);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct MotorCommands_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazypkg::MotorCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::crazypkg::MotorCommands_<ContainerAllocator> & v) 
  {
    s << indent << "cmd1: ";
    Printer<float>::stream(s, indent + "  ", v.cmd1);
    s << indent << "cmd2: ";
    Printer<float>::stream(s, indent + "  ", v.cmd2);
    s << indent << "cmd3: ";
    Printer<float>::stream(s, indent + "  ", v.cmd3);
    s << indent << "cmd4: ";
    Printer<float>::stream(s, indent + "  ", v.cmd4);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CRAZYPKG_MESSAGE_MOTORCOMMANDS_H

