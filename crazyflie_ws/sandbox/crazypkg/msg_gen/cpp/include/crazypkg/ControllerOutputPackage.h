/* Auto-generated by genmsg_cpp for file /home/crazyfly/crazyflie_ws/sandbox/crazypkg/msg/ControllerOutputPackage.msg */
#ifndef CRAZYPKG_MESSAGE_CONTROLLEROUTPUTPACKAGE_H
#define CRAZYPKG_MESSAGE_CONTROLLEROUTPUTPACKAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace crazypkg
{
template <class ContainerAllocator>
struct ControllerOutputPackage_ {
  typedef ControllerOutputPackage_<ContainerAllocator> Type;

  ControllerOutputPackage_()
  : roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , thrust(0)
  , motorCmd1(0)
  , motorCmd2(0)
  , motorCmd3(0)
  , motorCmd4(0)
  , onboardControllerType(0)
  {
  }

  ControllerOutputPackage_(const ContainerAllocator& _alloc)
  : roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , thrust(0)
  , motorCmd1(0)
  , motorCmd2(0)
  , motorCmd3(0)
  , motorCmd4(0)
  , onboardControllerType(0)
  {
  }

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _yaw_type;
  float yaw;

  typedef uint16_t _thrust_type;
  uint16_t thrust;

  typedef uint16_t _motorCmd1_type;
  uint16_t motorCmd1;

  typedef uint16_t _motorCmd2_type;
  uint16_t motorCmd2;

  typedef uint16_t _motorCmd3_type;
  uint16_t motorCmd3;

  typedef uint16_t _motorCmd4_type;
  uint16_t motorCmd4;

  typedef uint8_t _onboardControllerType_type;
  uint8_t onboardControllerType;


  typedef boost::shared_ptr< ::crazypkg::ControllerOutputPackage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazypkg::ControllerOutputPackage_<ContainerAllocator>  const> ConstPtr;
}; // struct ControllerOutputPackage
typedef  ::crazypkg::ControllerOutputPackage_<std::allocator<void> > ControllerOutputPackage;

typedef boost::shared_ptr< ::crazypkg::ControllerOutputPackage> ControllerOutputPackagePtr;
typedef boost::shared_ptr< ::crazypkg::ControllerOutputPackage const> ControllerOutputPackageConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::crazypkg::ControllerOutputPackage_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::crazypkg::ControllerOutputPackage_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace crazypkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::crazypkg::ControllerOutputPackage_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::crazypkg::ControllerOutputPackage_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::crazypkg::ControllerOutputPackage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b6ac24b895aa888e2867a1a58e54d9e";
  }

  static const char* value(const  ::crazypkg::ControllerOutputPackage_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b6ac24b895aa888ULL;
  static const uint64_t static_value2 = 0xe2867a1a58e54d9eULL;
};

template<class ContainerAllocator>
struct DataType< ::crazypkg::ControllerOutputPackage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "crazypkg/ControllerOutputPackage";
  }

  static const char* value(const  ::crazypkg::ControllerOutputPackage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::crazypkg::ControllerOutputPackage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 roll\n\
float32 pitch\n\
float32 yaw\n\
uint16 thrust\n\
uint16 motorCmd1\n\
uint16 motorCmd2\n\
uint16 motorCmd3\n\
uint16 motorCmd4\n\
uint8 onboardControllerType\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::crazypkg::ControllerOutputPackage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::crazypkg::ControllerOutputPackage_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::crazypkg::ControllerOutputPackage_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
    stream.next(m.thrust);
    stream.next(m.motorCmd1);
    stream.next(m.motorCmd2);
    stream.next(m.motorCmd3);
    stream.next(m.motorCmd4);
    stream.next(m.onboardControllerType);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ControllerOutputPackage_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazypkg::ControllerOutputPackage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::crazypkg::ControllerOutputPackage_<ContainerAllocator> & v) 
  {
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "thrust: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.thrust);
    s << indent << "motorCmd1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motorCmd1);
    s << indent << "motorCmd2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motorCmd2);
    s << indent << "motorCmd3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motorCmd3);
    s << indent << "motorCmd4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motorCmd4);
    s << indent << "onboardControllerType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.onboardControllerType);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CRAZYPKG_MESSAGE_CONTROLLEROUTPUTPACKAGE_H

