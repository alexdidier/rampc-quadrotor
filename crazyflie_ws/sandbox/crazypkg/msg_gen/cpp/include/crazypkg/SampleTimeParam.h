/* Auto-generated by genmsg_cpp for file /home/crazyfly/crazyflie_ws/sandbox/crazypkg/msg/SampleTimeParam.msg */
#ifndef CRAZYPKG_MESSAGE_SAMPLETIMEPARAM_H
#define CRAZYPKG_MESSAGE_SAMPLETIMEPARAM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace crazypkg
{
template <class ContainerAllocator>
struct SampleTimeParam_ {
  typedef SampleTimeParam_<ContainerAllocator> Type;

  SampleTimeParam_()
  : sampleTimeType(0)
  , value(0.0)
  {
  }

  SampleTimeParam_(const ContainerAllocator& _alloc)
  : sampleTimeType(0)
  , value(0.0)
  {
  }

  typedef int16_t _sampleTimeType_type;
  int16_t sampleTimeType;

  typedef double _value_type;
  double value;


  typedef boost::shared_ptr< ::crazypkg::SampleTimeParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazypkg::SampleTimeParam_<ContainerAllocator>  const> ConstPtr;
}; // struct SampleTimeParam
typedef  ::crazypkg::SampleTimeParam_<std::allocator<void> > SampleTimeParam;

typedef boost::shared_ptr< ::crazypkg::SampleTimeParam> SampleTimeParamPtr;
typedef boost::shared_ptr< ::crazypkg::SampleTimeParam const> SampleTimeParamConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::crazypkg::SampleTimeParam_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::crazypkg::SampleTimeParam_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace crazypkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::crazypkg::SampleTimeParam_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::crazypkg::SampleTimeParam_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::crazypkg::SampleTimeParam_<ContainerAllocator> > {
  static const char* value() 
  {
    return "976f518ece3cd97bf9e643ee0b1ebe6d";
  }

  static const char* value(const  ::crazypkg::SampleTimeParam_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x976f518ece3cd97bULL;
  static const uint64_t static_value2 = 0xf9e643ee0b1ebe6dULL;
};

template<class ContainerAllocator>
struct DataType< ::crazypkg::SampleTimeParam_<ContainerAllocator> > {
  static const char* value() 
  {
    return "crazypkg/SampleTimeParam";
  }

  static const char* value(const  ::crazypkg::SampleTimeParam_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::crazypkg::SampleTimeParam_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 sampleTimeType\n\
float64 value\n\
\n\
";
  }

  static const char* value(const  ::crazypkg::SampleTimeParam_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::crazypkg::SampleTimeParam_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::crazypkg::SampleTimeParam_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sampleTimeType);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SampleTimeParam_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazypkg::SampleTimeParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::crazypkg::SampleTimeParam_<ContainerAllocator> & v) 
  {
    s << indent << "sampleTimeType: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sampleTimeType);
    s << indent << "value: ";
    Printer<double>::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CRAZYPKG_MESSAGE_SAMPLETIMEPARAM_H

