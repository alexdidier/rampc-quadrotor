/* Auto-generated by genmsg_cpp for file /home/crazyfly/crazyflie_ws/sandbox/crazypkg/msg/ViconData.msg */
#ifndef CRAZYPKG_MESSAGE_VICONDATA_H
#define CRAZYPKG_MESSAGE_VICONDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace crazypkg
{
template <class ContainerAllocator>
struct ViconData_ {
  typedef ViconData_<ContainerAllocator> Type;

  ViconData_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , acquiringTime(0.0)
  {
  }

  ViconData_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , acquiringTime(0.0)
  {
  }

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _z_type;
  double z;

  typedef double _roll_type;
  double roll;

  typedef double _pitch_type;
  double pitch;

  typedef double _yaw_type;
  double yaw;

  typedef double _acquiringTime_type;
  double acquiringTime;


  typedef boost::shared_ptr< ::crazypkg::ViconData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazypkg::ViconData_<ContainerAllocator>  const> ConstPtr;
}; // struct ViconData
typedef  ::crazypkg::ViconData_<std::allocator<void> > ViconData;

typedef boost::shared_ptr< ::crazypkg::ViconData> ViconDataPtr;
typedef boost::shared_ptr< ::crazypkg::ViconData const> ViconDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::crazypkg::ViconData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::crazypkg::ViconData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace crazypkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::crazypkg::ViconData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::crazypkg::ViconData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::crazypkg::ViconData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3aaa54bd6680c6a9bcb78b73c5685d64";
  }

  static const char* value(const  ::crazypkg::ViconData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3aaa54bd6680c6a9ULL;
  static const uint64_t static_value2 = 0xbcb78b73c5685d64ULL;
};

template<class ContainerAllocator>
struct DataType< ::crazypkg::ViconData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "crazypkg/ViconData";
  }

  static const char* value(const  ::crazypkg::ViconData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::crazypkg::ViconData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 x\n\
float64 y\n\
float64 z\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
float64 acquiringTime\n\
\n\
";
  }

  static const char* value(const  ::crazypkg::ViconData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::crazypkg::ViconData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::crazypkg::ViconData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
    stream.next(m.acquiringTime);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ViconData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazypkg::ViconData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::crazypkg::ViconData_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "acquiringTime: ";
    Printer<double>::stream(s, indent + "  ", v.acquiringTime);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CRAZYPKG_MESSAGE_VICONDATA_H

